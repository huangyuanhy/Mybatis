<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper  
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">  

<!-- 如果使用mapper代理的话，此处的命名空间名称与 mapper接口全路径一致 -->
<mapper namespace="usermapper.UserMapper">

	<!-- 动态sql的使用  及sql 片段的案例测试 -->
	<!-- 定义sql片段 -->
	<sql id="sql_query">
		<if test="userCustom!=null">
			
			<if test="userCustom.name!=null">
				and user.name like '%${userCustom.name}%'
			</if>	
			<if test="userCustom.age!=null and userCustom.age!=''">
				and user.age=#{userCustom.age}
			</if>	
		</if>
	</sql>
	<!-- 使用动态sql片段 -->
	<select id="sql_queryTest" parameterType="userCustomVo" resultType="userCustom">
		select * from user
		<where>
			<include refid="sql_query"></include>
		</where>
	</select>

	<!-- resultmap输出结果集    查询出的列名和pojo属性名不一致时，使用它建立一个二者的映射关系
		定义resultmap  type=resultmap最终映射的java对象类型     id=resultmap的唯一标识
	 -->
	 <resultMap type="user" id="userresultmap">
	 <!--  id是  resultmap输出结果集   中的唯一标识，一般就是对应pojo中主键id
	 result 是普通属性
	 column=查询出的列名    property=pojo中的类型属性名
	 -->
	 	<id column="user_id" property="id"/>
	 	<result column="user_name" property="name"/>
	 </resultMap>
	 
	 <!-- 使用resultmap输出结果集   如果resultMap定义在其他mapper文件中，则需要加上对应的命名空间 -->
	<select id="findUserResultMap" parameterType="int" resultMap="userresultmap">
	
		select id user_id, name user_name from user where id=#{id}
	</select>

	<!-- 根据id 删除用户 -->
	<delete id="deleteUser" parameterType="int">
		delete from user where id=#{id}
	</delete>
	<!-- 根据id跟新用户 -->
	<update id="updateUser" parameterType="dao.User">
		update user set name=#{name},age=#{age} where id=#{id}
	</update>

<!-- 添加用户 -->
	
	<insert id="insertUser" parameterType="dao.User">
	<!-- 将插入数据的主键返回到user对象中 -->
	<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
		<!-- select last_insert_id()只适用于自增主键 keyProperty="id"： 将查旬到的主键设置到指定对象user 
			中的id属性 order="AFTER： 表明执行顺序在插入之后执行 -->
		SELECT LAST_INSERT_ID()
	</selectKey>
	
	<!-- #{}中指定pojo对象的属性值  -->
		insert into user (name ,age) value (#{name},#{age})
	</insert>

	<!-- 根据id简单查询 -->
	<select id="findUserById" parameterType="int" resultType="user">
	<!-- #{id} 占位符 参数为简单类型的恶化，#{}中的参数可以任意 -->	
		select * from user where id=#{id}
	</select>
	
	<!-- 模糊查询  可能返回多条-->
	<select id="findUserByName" parameterType="java.lang.String" resultType="dao.User">
		<!-- ${value}拼接sql 拼接符 可能会引起sql注入  如果传入的类型是简单类型，参数只能写成value -->	
		select * from user where name like '%${value}%'
	</select>
</mapper>





